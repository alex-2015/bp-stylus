*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}body,html{margin:0;padding:0 5%}section{padding:4.375rem 0}.center{position:relative;clear:both;margin:0 auto;width:100%;}@media only screen and (max-width:800px){.center{width:940px}}@media only screen and (max-width:600px){.center{width:720px}}@media only screen and (max-width:400px){.center{width:90%;margin:0 5%}}.circle{border-radius:50%;}nav[role='navigation'] ul{margin:0;padding:0;}nav[role='navigation'] ul:before,nav[role='navigation'] ul:after{content:"";display:table}nav[role='navigation'] ul:after{clear:both}nav[role='navigation'] ul li{float:left;margin-right:20px;list-style-type:none}nav[role='navigation'] ul li:last-child{margin-right:0}.black{color:#000}.white{color:#fff}.defaultType,body,p,a,h1,h2,h3,h4,h5,h6,small,em,strong,input,button{font-family:"Helvetica Neue","Helvetica","Arial",sans-serif;font-weight:normal;font-style:normal;-webkit-font-smoothing:antialiased}h1,h2,h3,h4,h5,h6{display:block;margin:1rem 0;font-weight:normal;margin-bottom:1rem;}h1:first-child,h2:first-child,h3:first-child,h4:first-child,h5:first-child,h6:first-child{margin-top:0}h1 a,h2 a,h3 a,h4 a,h5 a,h6 a{color:inherit}h1{font-size:64rem;font-size:4rem;line-height:1.1em}h2{font-size:48rem;font-size:3rem;line-height:1.2em}h3{font-size:36rem;font-size:2.25rem;line-height:1.3em}h4{font-size:28rem;font-size:1.75rem;}h5{font-size:22rem;font-size:1.375rem;}h6{font-size:18rem;font-size:1.125rem;}p{font-size:16px;font-size:1rem;line-height:1.5em}.animated{-webkit-animation-duration:.5s;-moz-animation-duration:.5s;-o-animation-duration:.5s;-ms-animation-duration:.5s;animation-duration:.5s;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;-o-animation-fill-mode:both;-ms-animation-fill-mode:both;animation-fill-mode:both}.over-scale{-webkit-animation-name:overscale;-moz-animation-name:overscale;-o-animation-name:overscale;-ms-animation-name:overscale;animation-name:overscale;-webkit-animation-duration:.6s;-moz-animation-duration:.6s;-o-animation-duration:.6s;-ms-animation-duration:.6s;animation-duration:.6s;-webkit-animation-delay:.3s;-moz-animation-delay:.3s;-o-animation-delay:.3s;-ms-animation-delay:.3s;animation-delay:.3s;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;-o-animation-timing-function:ease-in-out;-ms-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}.delay-1{-webkit-animation-delay:.25s;-moz-animation-delay:.25s;-o-animation-delay:.25s;-ms-animation-delay:.25s;animation-delay:.25s}.delay-2{-webkit-animation-delay:.5s;-moz-animation-delay:.5s;-o-animation-delay:.5s;-ms-animation-delay:.5s;animation-delay:.5s}@-moz-keyframes overscale{0%{-webkit-transform:scale(0);-moz-transform:scale(0);-o-transform:scale(0);-ms-transform:scale(0);transform:scale(0)}70%{-webkit-transform:scale(1.1);-moz-transform:scale(1.1);-o-transform:scale(1.1);-ms-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-moz-transform:scale(1);-o-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@-webkit-keyframes overscale{0%{-webkit-transform:scale(0);-moz-transform:scale(0);-o-transform:scale(0);-ms-transform:scale(0);transform:scale(0)}70%{-webkit-transform:scale(1.1);-moz-transform:scale(1.1);-o-transform:scale(1.1);-ms-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-moz-transform:scale(1);-o-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@-o-keyframes overscale{0%{-webkit-transform:scale(0);-moz-transform:scale(0);-o-transform:scale(0);-ms-transform:scale(0);transform:scale(0)}70%{-webkit-transform:scale(1.1);-moz-transform:scale(1.1);-o-transform:scale(1.1);-ms-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-moz-transform:scale(1);-o-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@keyframes overscale{0%{-webkit-transform:scale(0);-moz-transform:scale(0);-o-transform:scale(0);-ms-transform:scale(0);transform:scale(0)}70%{-webkit-transform:scale(1.1);-moz-transform:scale(1.1);-o-transform:scale(1.1);-ms-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-moz-transform:scale(1);-o-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}body.home{background:#efefef;color:#333;}@media only screen and (max-width:600px){body.home{border:5px solid #2ecc40}}body.home ul{margin:0;padding:0;}body.home ul:before,body.home ul:after{content:"";display:table}body.home ul:after{clear:both}body.home ul li{float:left;margin-right:20px;list-style-type:none}body.home ul li:last-child{margin-right:0}body.home ul li{*zoom:1;float:left;clear:none;text-align:inherit;width:22.75%;margin-left:0%;margin-right:3%;transition:all .5s ease;}body.home ul li:before,body.home ul li:after{content:'';display:table}body.home ul li:after{clear:both}body.home ul li:last-child{margin-right:0%}body.home ul li:hover{background-color:#222}body.home a.btn,body.home button{margin-right:.625rem;background-color:#00ced1;border:1px solid #00ced1;border-radius:4px;color:#fff;cursor:pointer;display:inline-block;font-size:16rem;font-size:1rem;letter-spacing:normal;line-height:1.875rem;padding:.625rem 32px;text-align:center;text-decoration:none;text-tranform:none;transition:all .3s ease-in-out;}body.home a.btn:hover,body.home button:hover{color:#fff;background-color:#40e0d0;border:1px solid #40e0d0}body.home a.btn:focus,body.home button:focus{outline:0;border:1px solid #20c6b6}
/*# sourceMappingURL=data:application/json;base64, */